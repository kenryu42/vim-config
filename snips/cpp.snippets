snippet uf "Union Find" b
struct  UnionFind {
	vector<int> d;
	UnionFind(int n = 0): d(n, -1) {}
	int find(int x) {
		if (d[x] < 0) return x;
		return (d[x] = find(d[x]));
	}
	bool unite(int x, int y) {
		x = find(x); y = find(y);
		if (x == y) return false;
		if (d[x] > d[y]) swap(x, y);
		d[x] += d[y];
		d[y] = x;
		return true;
	}
	bool same(int x, int y) { return find(x) == find(y); }
	int size(int x) { return -d[find(x)]; }
};
endsnippet

snippet mint "Mod Int" b
struct mint {
	uint x;
	mint(): x(0) {}
	mint(ll x):x((x%mod+mod)%mod) {}
	mint operator-() const { return mint(0) - *this;}
	mint operator~() const { return mint(1) / *this;}
	mint& operator+=(const mint& a) { if((x+=a.x)>=mod) x-=mod; return *this;}
	mint& operator-=(const mint& a) { if((x+=mod-a.x)>=mod) x-=mod; return *this;}
	mint& operator*=(const mint& a) { x=(ull)x*a.x%mod; return *this;}
	mint& operator/=(const mint& a) { x=(ull)x*a.pow(mod-2).x%mod; return *this;}
	mint operator+(const mint& a) const { return mint(*this) += a;}
	mint operator-(const mint& a) const { return mint(*this) -= a;}
	mint operator*(const mint& a) const { return mint(*this) *= a;}
	mint operator/(const mint& a) const { return mint(*this) /= a;}
	mint pow(ll t) const {
		if(!t) return 1;
		mint res = pow(t/2);
		res *= res;
		return (t&1)?res*x:res;
	}
	mint inv() const { return pow(mod-2);}
	bool operator<(const mint& a) const { return x < a.x;}
	bool operator>(const mint& a) const { return x > a.x;}
	bool operator==(const mint& a) const { return x == a.x;}
	bool operator!=(const mint& a) const { return x != a.x;}
};

istream& operator>>(istream&i,mint&a) {i>>a.x;return i;}
ostream& operator<<(ostream&o,const mint&a) {o<<a.x;return o;}
endsnippet

snippet comb "Combination mod prime" b
struct combination {
	vector<mint> fact, ifact;
	combination(int n):fact(n+1),ifact(n+1) {
		assert(n < mod);
		fact[0] = 1;
		for (int i = 1; i <= n; ++i) fact[i] = fact[i-1]*i;
		ifact[n] = fact[n].inv();
		for (int i = n; i >= 1; --i) ifact[i-1] = ifact[i]*i;
	}
	mint operator()(int n, int k) {
		if (k < 0 || k > n) return 0;
		return fact[n]*ifact[k]*ifact[n-k];
	}
};
endsnippet
